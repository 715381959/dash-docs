children=list(
htmlDiv('Plotly Dash', className="app-header--title")
)
),
htmlDiv(
children=htmlDiv(list(
htmlH5('Overview'),
htmlDiv("
This is an example of a simple Dash app with
local, customized CSS.
")
))
)
)))
app$run_heroku()
library(dashR)
library(dashCoreComponents)
library(dashHtmlComponents)
app <- Dash$new()
app$layout(htmlDiv(list(
htmlDiv(
className="app-header",
children=list(
htmlDiv('Plotly Dash', className="app-header--title")
)
),
htmlDiv(
children=htmlDiv(list(
htmlH5('Overview'),
htmlDiv("
This is an example of a simple Dash app with
local, customized CSS.
")
))
)
)))
library(dashR)
library(dashCoreComponents)
library(dashHtmlComponents)
app <- Dash$new()
app$layout_set(htmlDiv(list(
htmlDiv(
className="app-header",
children=list(
htmlDiv('Plotly Dash', className="app-header--title")
)
),
htmlDiv(
children=htmlDiv(list(
htmlH5('Overview'),
htmlDiv("
This is an example of a simple Dash app with
local, customized CSS.
")
))
)
)))
app$run_heroku()
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashR)
utils <- new.env()
source('dashr/utils.R', local=utils)
examples <- list(
local_css=utils$LoadExampleCode('dashr/chapters/external-resources/examples/local-css.R')
# custom_index_string=utils$LoadExampleCode('dashr/chapters/external-resources/examples/custom-index-string.R'),
# custom_interpolate_string=utils$LoadExampleCode('dashr/chapters/external-resources/examples/custom-interpolate-string.R'),
# dash_meta_tags=utils$LoadExampleCode('dashr/chapters/external-resources/examples/dash-meta-tags.R'),
# custom_dash_renderer=utils$LoadExampleCode('dashr/chapters/external-resources/examples/custom-dash-renderer.R'),
# custom_dash_renderer_hooks=utils$LoadExampleCode('dashr/chapters/external-resources/examples/custom-dash-renderer-hooks.R'),
# external_resources_init=utils$LoadExampleCode('dashr/chapters/external-resources/examples/external-resources-init.R')
)
layout <- htmlDiv(list(
htmlH1('Adding CSS & JS and Overriding the Page-Load Template'),
dccMarkdown("
Dash applications are rendered in the web browser with CSS and JavaScript.
On page load, Dash serves a small HTML template that includes references to
the CSS and JavaScript that are required to render the application.
This chapter covers everything that you need to know about configuring
this HTML file and about including external CSS and JavaScript in Dash
applications.
**Table of Contents**
- Adding Your Own CSS and JavaScript to Dash Apps
- Embedding Images in Your Dash Apps
- Adding External CSS and JavaScript
- Customizing Dash's HTML Index Template
- Adding Meta Tags
- Serving Dash's Component Libraries Locally or from a CDN
- Sample Dash CSS Stylesheet
***
## Adding Your Own CSS and JavaScript to Dash Apps
**New in dash 0.22.0**
Including custom CSS or JavaScript in your Dash apps is simple.
Just create a folder named `assets` in the root of your app directory
and include your CSS and JavaScript
files in that folder. Dash will automatically serve all of the files that
are included in this folder. By default the url to request the assets will
be `/assets` but you can customize this with the `assets_url_path` argument
to `dash.Dash`.
**Important: For these examples, you need to include `__name__` in your Dash constructor.**
That is, `app = dash.Dash(__name__)` instead of `app = dash.Dash()`. [Here's why](https://community.plot.ly/t/dash-app-does-not-load-assets-and-app-index-string/12178/10?u=chriddyp).
### Example: Including Local CSS and JavaScript
We'll create several files: `app.py`, a folder named `assets`, and
three files in that folder:
```
- app.py
- assets/
|-- typography.css
|-- header.css
|-- custom-script.js
```
`app.py`
"),
examples$local_css$source_code,
print(examples$local_css$source_code)
htmlDiv(
dccMarkdown('`typography.css`'),
style=list('paddingTop' = 20)
),
dccSyntaxHighlighter(
"body {
font-family: sans-serif;
}
h1, h2, h3, h4, h5, h6 {
color: hotpink
}
",
language='css'
)
))
examples$local_css$source_code
examples$local_css
examples
examples$local_css
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashR)
utils <- new.env()
source('dashr/utils.R', local=utils)
examples <- list(
local_css=readLines('dashr/chapters/external-resources/examples/local-css.R')
# custom_index_string=utils$LoadExampleCode('dashr/chapters/external-resources/examples/custom-index-string.R'),
# custom_interpolate_string=utils$LoadExampleCode('dashr/chapters/external-resources/examples/custom-interpolate-string.R'),
# dash_meta_tags=utils$LoadExampleCode('dashr/chapters/external-resources/examples/dash-meta-tags.R'),
# custom_dash_renderer=utils$LoadExampleCode('dashr/chapters/external-resources/examples/custom-dash-renderer.R'),
# custom_dash_renderer_hooks=utils$LoadExampleCode('dashr/chapters/external-resources/examples/custom-dash-renderer-hooks.R'),
# external_resources_init=utils$LoadExampleCode('dashr/chapters/external-resources/examples/external-resources-init.R')
)
examples$local_css
library(dashR)
a
library(dashR)
library(dashCoreComponents)
library(dashHtmlComponents)
app <- Dash$new()
app$index_string = "
<!DOCTYPE html>
<html>
<head>
{%metas%}
<title>{%title%}</title>
{%favicon%}
{%css%}
</head>
<body>
<div>My Custom header</div>
{%app_entry%}
<footer>
{%config%}
{%scripts%}
{%renderer%}
</footer>
<div>My Custom footer</div>
</body>
</html>
"
library(dashR)
library(plotly)
library(dashHtmlComponents)
library(dashCoreComponents)
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
app$layout_set(
htmlDiv(list(
htmlDiv(list(
htmlH3("Plotly.js importing test using Edgar Anderson's iris data")
),
className = 'row'),
htmlDiv(list(
dccDropdown(id = 'species-selector',
value = list('setosa', 'versicolor', 'virginica'),
options = list(list(value = "setosa",
label = "Setosa"),
list(value = "versicolor",
label = "Versicolor"),
list(value = "virginica",
label = "Virginica")),
multi = TRUE)),
className = 'row'),
htmlDiv(list(
htmlH4('Sepal width (cm) vs. sepal length (cm)', className = 'six columns'),
htmlH4('Petal length (cm) vs. sepal length (cm)', className = 'six columns')
),
className = 'row'),
htmlDiv(list(
htmlDiv(
id = 'div-sepal-sepal',
className = 'six columns'),
htmlDiv(
id = 'div-petal-sepal',
className = 'six columns')),
className='row')
)
)
)
)
)
app$callback(output=list(id='div-petal-sepal', property='children'),
params=list(
input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
} else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-petal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Petal.Length))
}
)
app$callback(output=list(id='div-sepal-sepal', property='children'),
params=list(
input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
} else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-sepal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Sepal.Width))
}
)
app$run_server()
library(dashR)
library(plotly)
library(dashHtmlComponents)
library(dashCoreComponents)
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
app$layout_set(
htmlDiv(list(
htmlDiv(list(
htmlH3("Plotly.js importing test using Edgar Anderson's iris data")
),
className = 'row'),
htmlDiv(list(
dccDropdown(id = 'species-selector',
value = list('setosa', 'versicolor', 'virginica'),
options = list(list(value = "setosa",
label = "Setosa"),
list(value = "versicolor",
label = "Versicolor"),
list(value = "virginica",
label = "Virginica")),
multi = TRUE)),
className = 'row'),
htmlDiv(list(
htmlH4('Sepal width (cm) vs. sepal length (cm)', className = 'six columns'),
htmlH4('Petal length (cm) vs. sepal length (cm)', className = 'six columns')
),
className = 'row'),
htmlDiv(list(
htmlDiv(
id = 'div-sepal-sepal',
className = 'six columns'),
htmlDiv(
id = 'div-petal-sepal',
className = 'six columns')),
className='row')
)
)
)
)
)
app$callback(output=list(id='div-petal-sepal', property='children'),
params=list(
input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
} else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-petal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Petal.Length))
}
)
app$callback(output=list(id='div-sepal-sepal', property='children'),
params=list(
input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
} else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-sepal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Sepal.Width))
}
)
app$run_server()
library(dashR)
library(plotly)
library(dashHtmlComponents)
library(dashCoreComponents)
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
app$layout_set(
htmlDiv(list(
htmlDiv(list(
htmlH3("Plotly.js importing test using Edgar Anderson's iris data")
),
className = 'row'),
htmlDiv(list(
dccDropdown(id = 'species-selector',
value = list('setosa', 'versicolor', 'virginica'),
options = list(list(value = "setosa",
label = "Setosa"),
list(value = "versicolor",
label = "Versicolor"),
list(value = "virginica",
label = "Virginica")),
multi = TRUE)),
className = 'row'),
htmlDiv(list(
htmlH4('Sepal width (cm) vs. sepal length (cm)', className = 'six columns'),
htmlH4('Petal length (cm) vs. sepal length (cm)', className = 'six columns')
),
className = 'row'),
htmlDiv(list(
htmlDiv(
id = 'div-sepal-sepal',
className = 'six columns'),
htmlDiv(
id = 'div-petal-sepal',
className = 'six columns')),
className='row')
)
)
)
app$callback(output=list(id='div-petal-sepal', property='children'),
params=list(
input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
} else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-petal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Petal.Length))
}
)
app$callback(output=list(id='div-sepal-sepal', property='children'),
params=list(
input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
} else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-sepal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Sepal.Width))
}
)
app$run_server()
remotes::install_github("plotly/dashR")
library(dashR)
library(plotly)
library(dashHtmlComponents)
library(dashCoreComponents)
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
app$layout_set(
htmlDiv(list(
htmlDiv(list(
htmlH3("Plotly.js importing test using Edgar Anderson's iris data")
),
className = 'row'),
htmlDiv(list(
dccDropdown(id = 'species-selector',
value = list('setosa', 'versicolor', 'virginica'),
options = list(list(value = "setosa",
label = "Setosa"),
list(value = "versicolor",
label = "Versicolor"),
list(value = "virginica",
label = "Virginica")),
multi = TRUE)),
className = 'row'),
htmlDiv(list(
htmlH4('Sepal width (cm) vs. sepal length (cm)', className = 'six columns'),
htmlH4('Petal length (cm) vs. sepal length (cm)', className = 'six columns')
),
className = 'row'),
htmlDiv(list(
htmlDiv(
id = 'div-sepal-sepal',
className = 'six columns'),
htmlDiv(
id = 'div-petal-sepal',
className = 'six columns')),
className='row')
)
)
)
)
)
app$callback(output=list(id='div-petal-sepal', property='children'),
params=list(
input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
} else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-petal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Petal.Length))
}
)
app$callback(output=list(id='div-sepal-sepal', property='children'),
params=list(
input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
} else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-sepal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Sepal.Width))
}
)
app$run_server()
install.packages("plotly")
install.packages("plotly")
library(dashR)
library(plotly)
library(dashHtmlComponents)
library(dashCoreComponents)
app <- Dash$new(external_stylesheets = "https://codepen.io/chriddyp/pen/bWLwgP.css")
app$layout_set(
htmlDiv(list(
htmlDiv(list(
htmlH3("Plotly.js importing test using Edgar Anderson's iris data")
),
className = 'row'),
htmlDiv(list(
dccDropdown(id = 'species-selector',
value = list('setosa', 'versicolor', 'virginica'),
options = list(list(value = "setosa",
label = "Setosa"),
list(value = "versicolor",
label = "Versicolor"),
list(value = "virginica",
label = "Virginica")),
multi = TRUE)),
className = 'row'),
htmlDiv(list(
htmlH4('Sepal width (cm) vs. sepal length (cm)', className = 'six columns'),
htmlH4('Petal length (cm) vs. sepal length (cm)', className = 'six columns')
),
className = 'row'),
htmlDiv(list(
htmlDiv(
id = 'div-sepal-sepal',
className = 'six columns'),
htmlDiv(
id = 'div-petal-sepal',
className = 'six columns')),
className='row')
)
)
)
)
)
app$callback(output=list(id='div-petal-sepal', property='children'),
params=list(
input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
} else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-petal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Petal.Length))
}
)
app$callback(output=list(id='div-sepal-sepal', property='children'),
params=list(
input(id='species-selector', property='value')),
function(species)
{
if (!(length(species))) {
subdata <- iris
} else {
subdata <- iris[which(iris$Species == species),]
}
dccGraph(id = 'graph-sepal-sepal', figure = plot_ly(data = subdata, x = ~Sepal.Length, y = ~Sepal.Width))
}
)
app$run_server()
