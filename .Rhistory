source("app.R")
source("app.R")
help(brotli_compress)
help(brotli_compress)
source("app.R")
dynGet("foon", ifnotfound = FALSE)$config$silence_routes_logging
dynGet("foon", ifnotfound = FALSE)
foo <- list(foo=list(1,2,3))
foo
foo$foo
foo$foo
foo$foo != FALSE
type(foo)
typeof(foo)
source("app.R")
debugonce(dash:::dashLogger)
source("app.R")
self_object
silence_routes_logging
event
msg
msg
cat(msg)
setwd("/tmp")
setwd("dashr-design-kit-docs/")
dir()
source("app.R")
help(dashR)
help(dash)
source("app.R")
source("app.R")
dashDesignKit:::.dashDesignKit_js_metadata()
source("app.R")
dashDesignKit:::.dashDesignKit_js_metadata()
help(dash)
getwd()
source("app.R")
source("app.R")
help(ddkBlock)
source("app.R")
setwd("..")
dir()
setwd("app")
setwd("..")
ls
setwd("/")
dir()
setwd("app")
source("app.R")
dir()
getwd()
setwd("app")
dir()
setwd("/")
dir()
setwd("app")
source("app.R")
source("app.R")
source("app.R")
pathname
pathname
normalized_pathname
underscore_pathname
example_apps
pathname
setwd("..")
dir()
setwd("dashr-design-kit/")
dir()
source("app.R")
dir()
source("app.R")
dir()
getwd()
source("app.R")
Q
source("app.R")
Q
source("app.R")
source("/Users/rpkyle/PlotlyRepos/dashr-design-kit/app.R")
dir()
source("app.R")
source("app.R")
rm(app)
#appName <- "dashr-design-kit"
if (appName != ""){
pathPrefix <- sprintf("/%s/", appName)
Sys.setenv(DASH_ROUTES_PATHNAME_PREFIX = pathPrefix,
DASH_REQUESTS_PATHNAME_PREFIX = pathPrefix,
DASH_PORT = "5000")
# setwd(sprintf("/app/%s", appName))
setwd("app")
}
source("./dash_design_kit_docs/server.R")
source("./dash_design_kit_docs/misc.R")
source("./dash_design_kit_docs/index.R")
app <- create_app()
app$run_server(host = "0.0.0.0", port = 8050)
dir()
pwd
getwd()
setwd("~/PlotlyRepos/dashr-design-kit/")
source("app.R")
dir()
appName
rm(appName)
source("app.R")
source("app.R")
library(dashBio)
help("dashbioAlignmentViewer")
dashBio:::.dashBio_js_metadata()
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashBio)
data(p53fasta)
app <- Dash$new()
app$layout(htmlDiv(list(
dashbioAlignmentViewer(
id='my-dashbio-alignmentviewer',
data=p53fasta
)
)
)
)
app$run_server(showcase = TRUE)
getwd()
setwd("~")
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashBio)
data(p53fasta)
app <- Dash$new()
app$layout(htmlDiv(list(
dashbioAlignmentViewer(
id='my-dashbio-alignmentviewer',
data=p53fasta
)
)
)
)
app$run_server(showcase = TRUE)
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashBio)
data(p53fasta)
rm(app)
app <- Dash$new()
app$layout(htmlDiv(list(
dashbioAlignmentViewer(
id='my-dashbio-alignmentviewer',
data=p53fasta
)
)
)
)
dashbioAlignmentViewer(
id='my-dashbio-alignmentviewer',
data=p53fasta
)
app$run_server(showcase = TRUE)
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashBio)
app <- Dash$new()
pathToData <- system.file("extdata/circos_graph_data.json", package = "dashBio")
circos_graph_data <- jsonlite::fromJSON(pathToData, simplifyDataFrame=FALSE)
app$layout(htmlDiv(list(
dashbioCircos(
id = 'my-dashbio-circos',
tracks = list(
list('type' = 'CHORDS',
'data' = circos_graph_data[['chords']],
'opacity' = '0.7',
'color' = list('name' = 'color'),
'config' = list(
'tooltipContent' = list(
'source' = 'source',
'sourceID' = 'id',
'target' = 'target',
'targetID' = 'id',
'targetEnd' = 'end'
)
)
)),
layout = circos_graph_data[['GRCh37']]
)
)
)
)
app$run_server(showcase = TRUE)
dashBio:::.dashBio_js_metadata()
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashBio)
app <- Dash$new()
pathToData <- system.file("extdata/circos_graph_data.json", package = "dashBio")
circos_graph_data <- jsonlite::fromJSON(pathToData, simplifyDataFrame=FALSE)
app$layout(htmlDiv(list(
dashbioCircos(
id = 'my-dashbio-circos',
tracks = list(
list('type' = 'CHORDS',
'data' = circos_graph_data[['chords']],
'opacity' = '0.7',
'color' = list('name' = 'color'),
'config' = list(
'tooltipContent' = list(
'source' = 'source',
'sourceID' = 'id',
'target' = 'target',
'targetID' = 'id',
'targetEnd' = 'end'
)
)
)),
layout = circos_graph_data[['GRCh37']]
)
)
)
)
app$run_server(showcase = TRUE)
help("dashbioVolcano")
library(dash)
library(dashBio)
library(dashHtmlComponents)
library(dashCoreComponents)
app <- Dash$new()
data(voldata)
app$layout(
htmlDiv(
list(
'Effect sizes',
dccRangeSlider(
id = 'volcanoplot-input',
min = -3,
max = 3,
step = 0.05,
marks = setNames(
lapply(-3:3,
function(i){
list(label = as.character(i))
}),
-3:3
),
value = c(-0.5, 1)
),
htmlBr(),
htmlDiv(
dccGraph(
id = 'my-dashbio-volcanoplot',
figure = dashbioVolcano(
dataframe = voldata
)
)
)
)
)
)
app$callback(
output = list(id = 'my-dashbio-volcanoplot', property = 'figure'),
params = list(input(id = 'volcanoplot-input', property = 'value')),
function(effects) {
dashbioVolcano(
dataframe = voldata,
genomewideline_value = 2.5,
effect_size_line = unlist(effects),
)
}
)
app$run_server()
library(dashBio)
help(dashBio)
library(dash)
library(dashHtmlComponents)
library(dashCoreComponents)
library(dashBio)
app <- Dash$new()
app$layout(
htmlDiv(
list(
dccGraph(id = 'manhattan-plot',
figure = dashbioManhattan(HapMap,
snp = "SNP",
highlight = significantSNP)
)
)
)
)
app$run_server()
## Not run:
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashBio)
data(p53fasta)
app <- Dash$new()
app$layout(htmlDiv(list(
dashbioAlignmentChart(
id='my-dashbio-alignmentchart',
data=p53fasta
)
)
)
)
app$run_server(showcase = TRUE)
help("dashbioFornaContainer")
sequences <- list(
PDB_01019 = list(
sequence = 'AUGGGCCCGGGCCCAAUGGGCCCGGGCCCA',
structure = '.((((((())))))).((((((()))))))'
),
PDB_00598 = list(
sequence = 'GGAGAUGACgucATCTcc',
structure = '((((((((()))))))))'
)
)
sequences
library(dash)
library(dashDaq)
help(dashDaq)
app <- Dash$new()
app$layout(htmlDiv(list(
# dashbioAlignmentChart(
#   id='my-dashbio-alignmentchart',
#   data=p53fasta
# )
daqBooleanSwitch(id='foo', on=FALSE, color=NULL, vertical=TRUE)
)
)
)
app$run_server(showcase = TRUE)
library(dashHtmlComponents)
app <- Dash$new()
app$layout(htmlDiv(list(
# dashbioAlignmentChart(
#   id='my-dashbio-alignmentchart',
#   data=p53fasta
# )
daqBooleanSwitch(id='foo', on=FALSE, color=NULL, vertical=TRUE)
)
)
)
app$run_server(showcase = TRUE)
library(dashCytoscape)
help("dashCytoscape")
library(dashCytoscape)
help("dashCytoscape")
dashCytoscape:::.dashCytoscape_js_metadata()
library(dash)
library(dashCytoscape)
library(dashHtmlComponents)
app <- Dash$new()
app$layout(
cytoCytoscape(
id='cytoscape-elements-boolean',
layout = list(name = 'preset'),
style = list(width = '100%', height = '400px'),
elements=list(
list(
data = list(id = 'one', label = 'Locked'),
position = list(x = 75, y = 75),
locked = TRUE
),
list(
data = list(id = 'two', label = 'Selected'),
position = list(x = 75, y = 200),
selected = TRUE
),
list(
data = list(id = 'three', label = 'Not Selectable'),
position = list(x = 200, y = 75),
selectable = FALSE
),
list(
data = list(id = 'four', label = 'Not Grabbable'),
position = list(x = 200, y = 200),
grabbable = FALSE
),
list(
data = list(source = 'one', target = 'two')
),
list(
data = list(source = 'two', target = 'three')
),
list(
data = list(source = 'three', target = 'four')
),
list(
data = list(source = 'two', target = 'four')
)
)
)
)
app$run_server(debug=TRUE)
library(dashCanvas)
help(dashCanvas)
help(dashDesignKit)
library(dashDesignKit)
help(dashDesignKit)
help(ddkBlock)
help(ddkApp)
install_github("plotly/dashR", upgrade = TRUE)
remotes::install_github("plotly/dashR", upgrade = TRUE)
remotes::install_github("plotly/dashR", upgrade = TRUE, ref = "134-async")
detach("package:dash", unload=TRUE)
detach("package:dashCanvas", unload=TRUE)
detach("package:dashCoreComponents", unload=TRUE)
detach("package:dashTable", unload=TRUE)
detach("package:dashHtmlComponents", unload=TRUE)
detach("package:dash", unload=TRUE)
help(dash)
detach("package:dash", unload=TRUE)
detach("package:dashR", unload=TRUE)
detach("dash", unload=TRUE)
library(cscmisc)
help(cscmisc)
detach("package:cscmisc", unload=TRUE)
remotes::install_github("rpkyle/dscmisc")
remotes::install_github("rpkyle/cscmisc")
library(cscmisc)
help(cscmisc)
cscmisc::detach_all(verbose = TRUE)
detach("dash", unload=TRUE)
detach("package:dash", unload=TRUE)
remotes::install_github("plotly/dashR", ref="134-async", upgrade=TRUE)
remotes::install_github("plotly/dashR", ref="134-async", upgrade=TRUE, force = TRUE)
library(dash)
help(dash)
library(dash)
app <- Dash$new()
app$layout(
dccInput(id = "inputID", value = "initial value", type = "text"),
htmlDiv(id = "outputID")
)
app$callback(output = list(id="outputID", property="children"),
params = list(input(id="inputID", property="value"),
state(id="inputID", property="type")),
function(x, y)
sprintf("You've entered: '%s' into a '%s' input control", x, y)
)
app$run_server(showcase = TRUE)
library(dashCoreComponents)
library(dash)
app <- Dash$new()
app$layout(
dccInput(id = "inputID", value = "initial value", type = "text"),
htmlDiv(id = "outputID")
)
app$callback(output = list(id="outputID", property="children"),
params = list(input(id="inputID", property="value"),
state(id="inputID", property="type")),
function(x, y)
sprintf("You've entered: '%s' into a '%s' input control", x, y)
)
app$run_server(showcase = TRUE)
library(dashHtmlComponents)
library(dash)
app <- Dash$new()
app$layout(
dccInput(id = "inputID", value = "initial value", type = "text"),
htmlDiv(id = "outputID")
)
app$callback(output = list(id="outputID", property="children"),
params = list(input(id="inputID", property="value"),
state(id="inputID", property="type")),
function(x, y)
sprintf("You've entered: '%s' into a '%s' input control", x, y)
)
app$run_server(showcase = TRUE)
help(dash)
cscmisc::detach_all()
detach("package:dash", unload=TRUE)
cscmisc::detach_all()
help(dash)
library(dash)
library(dash)
library(dash)
install.packages("RcppAPT")
library(RcppAPT)
help(RcppApt)
help(RcppAPT)
help(RcppAPT)
df_wind = read.csv('https://plot.ly/~datasets/2805.csv')
head(df_wind)
df_wind = data.table::fread('https://plot.ly/~datasets/2805.csv')
library(microbenchmark)
help(microbenchmark)
microbenchmark(df_wind = read.csv('https://plot.ly/~datasets/2805.csv'))
microbenchmark(read.csv('https://plot.ly/~datasets/2805.csv'))
microbenchmark(data.table::fread('https://plot.ly/~datasets/2805.csv'))
microbenchmark(read.csv('https://plot.ly/~datasets/2805.csv'), times=1)
microbenchmark(read.csv('https://plot.ly/~datasets/2805.csv'), times=3)
setwd("/Users/rpkyle/PlotlyRepos/dash-docs")
dir()
source("run.R")
help(dash)
source("run.R")
source("run.R")
source("run.R")
source("run.R")
source("run.R")
help(dash)
source("run.R")
source("run.R")
source("run.R")
source("run.R")
source("run.R")
