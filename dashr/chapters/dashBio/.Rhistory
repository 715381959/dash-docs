show_selected_atoms <- function(atom_ids) {
if (is.null(atom_ids[[1]]) | length(atom_ids) < 1 ) {
return("No atom has been selected. Click somewhere on the molecular structure to select an atom.")
}
else {
return(sprintf("Element or atom ID: %s", as.character(paste(unlist(atom_ids$name), collapse=' - '))))
}
# else {
#   return(sprintf("Element or atom ID: %s", as.character(paste(unlist(atom_ids), collapse=' - '))))
# }
}
)
app$run_server()
library(dash)
library(dashHtmlComponents)
library(dashCoreComponents)
library(dashBio)
library(jsonlite)
model_data <- read_json("https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/mol3d/model_data.js")
styles_data <- read_json("https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/mol3d/styles_data.js")
app <- Dash$new()
app$layout(
htmlDiv(
list(
dashbioMolecule3dViewer(
id = 'my-dashbio-molecule3d',
styles = styles_data,
modelData = model_data,
selectionType = 'Chain',
),
"Selection data",
htmlHr(),
htmlDiv(id = 'molecule3d-output')
)
)
)
app$callback(
output = list(id = 'molecule3d-output', property = 'children'),
params = list(input(id = 'my-dashbio-molecule3d', property = 'selectedAtomIds')),
show_selected_atoms <- function(atom_ids) {
if (is.null(atom_ids[[1]]) | length(atom_ids) < 1 ) {
return("No atom has been selected. Click somewhere on the molecular structure to select an atom.")
}
else {
return(sprintf("Element or atom ID: %s", as.character(paste(unlist(atom_ids$name), collapse=' - '))))
}
}
)
# app$run_server()
library(jsonlite)
data = read_json("assets/sample_data/needle_PIK3CA.json"
)
app$layout(htmlDiv(list(
'Show or hide range slider',
dccDropdown(
id = 'needleplot-rangeslider',
options = list(
list('label' = 'Show', 'value' = TRUE),
list('label' = 'Hide', 'value' = FALSE)
),
clearable = FALSE,
multi = FALSE,
value = TRUE
),
dashbioNeedlePlot(
id = 'default-dashbio-needleplot',
mutationData = data
)
)))
library(jsonlite)
library(dashBio)
library(data.table)
app <- Dash$new()
data = read_json("assets/sample_data/needle_PIK3CA.json")
app$layout(htmlDiv(list(
'Show or hide range slider',
dccDropdown(
id = 'needleplot-rangeslider',
options = list(
list('label' = 'Show', 'value' = TRUE),
list('label' = 'Hide', 'value' = FALSE)
),
clearable = FALSE,
multi = FALSE,
value = TRUE
),
dashbioNeedlePlot(
id = 'default-dashbio-needleplot',
mutationData = data
)
)))
app$callback(
output(id = "default-dashbio-needleplot", property = "rangeSlider"),
params = list(
input(id = 'needleplot-rangeslider', property = 'value')),
update_needleplot <- function(show_rangeslider){
return(show_rangeslider)
}
)
app$run_server(showcase = TRUE)
needleStyle <- htmlDiv(list(
dccMarkdown('## Needle Style'),
htmlP('Change the appearance of the needles.'),
utils$LoadAndDisplayComponent(
'
library(dashBio)
data = read_json("assets/sample_data/needle_PIK3CA.json")
dashbioNeedlePlot(
mutationData = data,
needleStyle = list(
"stemColor" = "#FF8888",
"stemThickness" = 2,
"stemConstHeight" = TRUE,
"headSize" = 10,
"headColor" = list("#FFDD00", "#000000")
)
)
'
)
))
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashBio)
library(jsonlite)
library(readr)
library(heatmaply)
library(data.table)
library(dashTable)
utils <- new.env()
source('assets/styles.R')
source('assets/utils.R')
source('assets/utils.R', local=utils)
examples <- list(
defaultNeedle=utils$LoadExampleCode('needleplot/examples/defaultNeedle.R')
)
dashbio_intro <- htmlDiv(list(
dccMarkdown('# NeedlePlot Examples and Reference'),
dccMarkdown('
See Needleplot in action [here](https://dash-bio.plotly.host/dash-needle-plot/)
')
))
# Individual Components and Examples
defaultNeedle <- htmlDiv(list(
dccMarkdown('## Default NeedlePlot'),
htmlP('An example of a default NeedlePlot component without any extra properties.'),
htmlDiv(list(
examples$defaultNeedle$source_code,
examples$defaultNeedle$layout))
))
needleStyle <- htmlDiv(list(
dccMarkdown('## Needle Style'),
htmlP('Change the appearance of the needles.'),
utils$LoadAndDisplayComponent(
'
library(dashBio)
data = read_json("assets/sample_data/needle_PIK3CA.json")
dashbioNeedlePlot(
mutationData = data,
needleStyle = list(
"stemColor" = "#FF8888",
"stemThickness" = 2,
"stemConstHeight" = TRUE,
"headSize" = 10,
"headColor" = list("#FFDD00", "#000000")
)
)
'
)
))
domainStyle <- htmlDiv(list(
dccMarkdown('## Domain Style'),
htmlP('Change the appearance of the domain.'),
utils$LoadAndDisplayComponent(
'
library(dashBio)
data = read_json("assets/sample_data/needle_PIK3CA.json")
dashbioNeedlePlot(
mutationData = data,
domainStyle = list(
"displayMinorDomains" = TRUE,
"domainColor" = list("#FFDD00", "#00FFDD", "#0F0F0F", "#D3D3D3")
)
)
'
)
))
library(dashTable)
needleProps <- propsToList("dashbioNeedlePlot")
needlePropsDF <- rbindlist(needleProps, fill = TRUE)
needlePropsTable <- generate_props_table(needlePropsDF)
# Main docs layout
layout <- htmlDiv(list(
dashbio_intro,
htmlHr(),
defaultNeedle,
htmlHr(),
needleStyle,
htmlHr(),
domainStyle,
htmlHr(),
needlePropsTable,
htmlA("Back to the Table of Contents", href = "/dash-bio/")
))
app <- Dash$new()
app$layout(htmlDiv(list(
layout
)))
app$run_server(showcase = TRUE)
getwappName <- Sys.getenv("DASH_APP_NAME")
if (appName != ""){
pathPrefix <- sprintf("/%s/", appName)
Sys.setenv(DASH_ROUTES_PATHNAME_PREFIX = pathPrefix,
DASH_REQUESTS_PATHNAME_PREFIX = pathPrefix)
setwd(sprintf("/app/apps/%s", appName))
}
setwd("C:/Users/hamma/Documents/dashBioDocs/dashR/chapters/dashBio")
#Source assets
source("assets/utils.R")
source("DashBioDocsMain.R")
source("app.R")
# Load Necessary Packages
library('dash')
library('dashCoreComponents')
library('dashHtmlComponents')
library('dashBio')
library('dashTable')
library('readr')
library('heatmaply')
library('data.table')
library('jsonlite')
library('rjson')
chapters.alignment <- new.env()
source('alignment-chart/alignment-chart.R', local=chapters.alignment)
chapters.circos <- new.env()
source('circos/circos.R', local=chapters.circos)
chapters.clustergram <- new.env()
source('clustergram/clustergram.R', local=chapters.clustergram)
chapters.ideogram <- new.env()
source('ideogram/ideogram.R', local=chapters.ideogram)
chapters.volcanoplot <- new.env()
source('volcanoplot/volcano.R', local=chapters.volcanoplot)
chapters.manhattan <- new.env()
source('manhattan/manhattan.R', local = chapters.manhattan)
chapters.molecule3dviewer <- new.env()
source('molecule3dviewer/molecule3dviewer.R', local=chapters.molecule3dviewer)
chapters.molecule2dviewer <- new.env()
source('molecule2dviewer/molecule2dviewer.R', local=chapters.molecule2dviewer)
chapters.needleplot <- new.env()
source('needleplot/needleplot.R', local=chapters.needleplot)
header <- htmlDiv(list(
htmlDiv(list(
htmlDiv(list(
htmlA(className = "logo-link", href = "https://plot.ly/products/dash",
children= htmlImg(src="assets/logo.png",
style = list("height" = "60px", "width" = "230px"))),
htmlDiv(className = "links", children = list(
htmlA(className = "link", children = "pricing", href = "https://plot.ly/dash/pricing?_ga=2.241429382.584183071.1559580389-2135338473.1556993734"),
htmlA(className = 'link', children = 'user guide', href = "/"),
htmlA(className = 'link', children = 'plotly', href = "https://plot.ly/"),
htmlA(className = 'link', href="https://dash.plot.ly/search", children =
htmlI(className = 'fa fa-search'))
))
))
), className = 'container-width')
), className = "header")
app$layout(
header,
htmlDiv(
list(
dccLocation(id='url'),
htmlDiv(
className='background',
children=list(
htmlDiv(id='wait-for-layout'),
htmlDiv(
className='container-width',
children=htmlDiv(
htmlDiv(id='chapter', className='content'),
className='content-container'
)
)
)
)
)
)
)
app$callback(output=list(id='chapter', property='children'),
params=list(input('url', 'pathname')),
function(pathname) {
switch(
pathname,
"/AlignmentChart" = return(chapters.alignment$layout),
"/Circos" = return(chapters.circos$layout),
"/Clustergram" = return(chapters.clustergram$layout),
"/Ideogram" = return(chapters.ideogram$layout),
"/ManhattanPlot" = return(chapters.manhattan$layout),
"/Molecule2dViewer" = return(chapters.molecule2dviewer$layout),
"/Molecule3dViewer" = return(chapters.molecule3dviewer$layout),
"/VolcanoPlot" = return(chapters.volcanoplot$layout),
"/NeedlePlot" = return(chapters.needleplot$layout)
{mainLayout
}
)
})
if (appName != "") {
app$run_server(host = "0.0.0.0", port = Sys.getenv('PORT', 8050))
} else {
app$run_server()
}
getwappName <- Sys.getenv("DASH_APP_NAME")
if (appName != ""){
pathPrefix <- sprintf("/%s/", appName)
Sys.setenv(DASH_ROUTES_PATHNAME_PREFIX = pathPrefix,
DASH_REQUESTS_PATHNAME_PREFIX = pathPrefix)
setwd(sprintf("/app/apps/%s", appName))
}
setwd("C:/Users/hamma/Documents/dashBioDocs/dashR/chapters/dashBio")
#Source assets
source("assets/utils.R")
source("DashBioDocsMain.R")
source("app.R")
# Load Necessary Packages
library('dash')
library('dashCoreComponents')
library('dashHtmlComponents')
library('dashBio')
library('dashTable')
library('readr')
library('heatmaply')
library('data.table')
library('jsonlite')
library('rjson')
chapters.alignment <- new.env()
source('alignment-chart/alignment-chart.R', local=chapters.alignment)
chapters.circos <- new.env()
source('circos/circos.R', local=chapters.circos)
chapters.clustergram <- new.env()
source('clustergram/clustergram.R', local=chapters.clustergram)
chapters.ideogram <- new.env()
source('ideogram/ideogram.R', local=chapters.ideogram)
chapters.volcanoplot <- new.env()
source('volcanoplot/volcano.R', local=chapters.volcanoplot)
chapters.manhattan <- new.env()
source('manhattan/manhattan.R', local = chapters.manhattan)
chapters.molecule3dviewer <- new.env()
source('molecule3dviewer/molecule3dviewer.R', local=chapters.molecule3dviewer)
chapters.molecule2dviewer <- new.env()
source('molecule2dviewer/molecule2dviewer.R', local=chapters.molecule2dviewer)
chapters.needleplot <- new.env()
source('needleplot/needleplot.R', local=chapters.needleplot)
header <- htmlDiv(list(
htmlDiv(list(
htmlDiv(list(
htmlA(className = "logo-link", href = "https://plot.ly/products/dash",
children= htmlImg(src="assets/logo.png",
style = list("height" = "60px", "width" = "230px"))),
htmlDiv(className = "links", children = list(
htmlA(className = "link", children = "pricing", href = "https://plot.ly/dash/pricing?_ga=2.241429382.584183071.1559580389-2135338473.1556993734"),
htmlA(className = 'link', children = 'user guide', href = "/"),
htmlA(className = 'link', children = 'plotly', href = "https://plot.ly/"),
htmlA(className = 'link', href="https://dash.plot.ly/search", children =
htmlI(className = 'fa fa-search'))
))
))
), className = 'container-width')
), className = "header")
app$layout(
header,
htmlDiv(
list(
dccLocation(id='url'),
htmlDiv(
className='background',
children=list(
htmlDiv(id='wait-for-layout'),
htmlDiv(
className='container-width',
children=htmlDiv(
htmlDiv(id='chapter', className='content'),
className='content-container'
)
)
)
)
)
)
)
app$callback(output=list(id='chapter', property='children'),
params=list(input('url', 'pathname')),
function(pathname) {
switch(
pathname,
"/AlignmentChart" = return(chapters.alignment$layout),
"/Circos" = return(chapters.circos$layout),
"/Clustergram" = return(chapters.clustergram$layout),
"/Ideogram" = return(chapters.ideogram$layout),
"/ManhattanPlot" = return(chapters.manhattan$layout),
"/Molecule2dViewer" = return(chapters.molecule2dviewer$layout),
"/Molecule3dViewer" = return(chapters.molecule3dviewer$layout),
"/VolcanoPlot" = return(chapters.volcanoplot$layout),
"/NeedlePlot" = return(chapters.needleplot$layout),
{mainLayout
}
)
})
if (appName != "") {
app$run_server(host = "0.0.0.0", port = Sys.getenv('PORT', 8050))
} else {
app$run_server()
}
getwappName <- Sys.getenv("DASH_APP_NAME")
if (appName != ""){
pathPrefix <- sprintf("/%s/", appName)
Sys.setenv(DASH_ROUTES_PATHNAME_PREFIX = pathPrefix,
DASH_REQUESTS_PATHNAME_PREFIX = pathPrefix)
setwd(sprintf("/app/apps/%s", appName))
}
setwd("C:/Users/hamma/Documents/dashBioDocs/dashR/chapters/dashBio")
#Source assets
source("assets/utils.R")
source("DashBioDocsMain.R")
source("app.R")
# Load Necessary Packages
library('dash')
library('dashCoreComponents')
library('dashHtmlComponents')
library('dashBio')
library('dashTable')
library('readr')
library('heatmaply')
library('data.table')
library('jsonlite')
library('rjson')
chapters.alignment <- new.env()
source('alignment-chart/alignment-chart.R', local=chapters.alignment)
chapters.circos <- new.env()
source('circos/circos.R', local=chapters.circos)
chapters.clustergram <- new.env()
source('clustergram/clustergram.R', local=chapters.clustergram)
chapters.ideogram <- new.env()
source('ideogram/ideogram.R', local=chapters.ideogram)
chapters.volcanoplot <- new.env()
source('volcanoplot/volcano.R', local=chapters.volcanoplot)
chapters.manhattan <- new.env()
source('manhattan/manhattan.R', local = chapters.manhattan)
chapters.molecule3dviewer <- new.env()
source('molecule3dviewer/molecule3dviewer.R', local=chapters.molecule3dviewer)
chapters.molecule2dviewer <- new.env()
source('molecule2dviewer/molecule2dviewer.R', local=chapters.molecule2dviewer)
chapters.needleplot <- new.env()
source('needleplot/needleplot.R', local=chapters.needleplot)
header <- htmlDiv(list(
htmlDiv(list(
htmlDiv(list(
htmlA(className = "logo-link", href = "https://plot.ly/products/dash",
children= htmlImg(src="assets/logo.png",
style = list("height" = "60px", "width" = "230px"))),
htmlDiv(className = "links", children = list(
htmlA(className = "link", children = "pricing", href = "https://plot.ly/dash/pricing?_ga=2.241429382.584183071.1559580389-2135338473.1556993734"),
htmlA(className = 'link', children = 'user guide', href = "/"),
htmlA(className = 'link', children = 'plotly', href = "https://plot.ly/"),
htmlA(className = 'link', href="https://dash.plot.ly/search", children =
htmlI(className = 'fa fa-search'))
))
))
), className = 'container-width')
), className = "header")
app$layout(
header,
htmlDiv(
list(
dccLocation(id='url'),
htmlDiv(
className='background',
children=list(
htmlDiv(id='wait-for-layout'),
htmlDiv(
className='container-width',
children=htmlDiv(
htmlDiv(id='chapter', className='content'),
className='content-container'
)
)
)
)
)
)
)
app$callback(output=list(id='chapter', property='children'),
params=list(input('url', 'pathname')),
function(pathname) {
switch(
pathname,
"/AlignmentChart" = return(chapters.alignment$layout),
"/Circos" = return(chapters.circos$layout),
"/Clustergram" = return(chapters.clustergram$layout),
"/Ideogram" = return(chapters.ideogram$layout),
"/ManhattanPlot" = return(chapters.manhattan$layout),
"/Molecule2dViewer" = return(chapters.molecule2dviewer$layout),
"/Molecule3dViewer" = return(chapters.molecule3dviewer$layout),
"/VolcanoPlot" = return(chapters.volcanoplot$layout),
"/NeedlePlot" = return(chapters.needleplot$layout),
{mainLayout
}
)
})
if (appName != "") {
app$run_server(host = "0.0.0.0", port = Sys.getenv('PORT', 8050))
} else {
app$run_server()
}
